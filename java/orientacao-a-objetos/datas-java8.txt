LocalDate: yyyy/MM/dd
 
package aulas.trabalhandoComDatas.javaLocalDate; 
import java.time.LocalDate; 

/*Exemplo de como manipular LocalDate*/ 

public class Exemplo011 { 
    public static void main(String[] args) { 
        LocalDate hoje = LocalDate.now(); 
        LocalDate ontem = hoje.minusDays(1); 
        System.out.println(hoje); 
        // 2019-07-14 
        System.out.println(ontem); 
        // 2019-07-13 
    } 
} 
 
LocalTime: é representada por nanosegundos. 12:22:10:123212345
 package aulas.trabalhandoComDatas.javaLocalDate; 
import java.time.LocalTime; 

/*Exemplo de como utilizar LocalTime*/ 

public class Exemplo012 { 
    public static void main(String[] args) { 
        LocalTime agora = LocalTime.now(); 
        System.out.println(agora); 
        // 23:53:58.421 
    } 
} 
 
LocalTime: o .plusHours adiciona uma quantidade de horas a mais
package aulas.trabalhandoComDatas.javaLocalDate; 
import java.time.LocalTime; 

/*Exemplo de como manipular LocalTime*/ 

public class Exemplo013 { 
    public static void main(String[] args) { 
        LocalTime agora = LocalTime.now(); 
        System.out.println(agora); 
        // 23:53:58.421 
        LocalTime maisUmaHora = agora.plusHours(1); 
        System.out.println(maisUmaHora); 
        // 00:55:37.421 
    } 
} 
 
LocalDateTime: funciona como uma espécie de junção entre o LocalTime e o LocalDate, é uma classe imutável e é possível trabalhar com dia e hora de uma vez só
package aulas.trabalhandoComDatas.javaLocalDate; 
import java.time.LocalDateTime;

/*Exemplo de como manipular LocalDateTime*/ 

public class Exemplo014 { 
    public static void main(String[] args) { 
        LocalDateTime agora = LocalDateTime.now(); 
        System.out.println(agora); 
        // 2019-07-15T00:02:16.076 
        LocalDateTime futuro = agora.plusHours(1).plusDays(2).plusSeconds(12); 
        System.out.println(futuro); 
        // 2019-07-17T01:02:28.076 
    } 
} 
