exceptions: são todos os erros que ocorrem durante o processamento de um método
 
try 
{ 
  // trecho de código que pode vir a lançar uma exceção 
} 
catch(tipo_exceçao_2 e) 
{ 
  // ação a ser tomada 
} 
 
checked exceptions
- são exceções esperadas para acontecer e você precisa tratá-las 
- bloco try catch: sempre é utilizado quando no processo que será executado dentro de um método é esperado um erro, então cria-se um bloco protegido onde qualquer erro que ocorra dentro do trecho “try” é direcionado para o trecho “catch” e sofrerá o devido tratamento de erro


 try { 
PreparedStatement stmt = con.prepareStatement(query); 
// ... 
} catch (SQLException e) { 
throw new AcessoADadosException("Problema na criação do Statement", e); 
} 
 
unchecked exceptions
são exceções não esperadas para o fluxo ou método de um sistema, um exemplo é a famosa NullPointException que ocorre quando se tenta acessar uma referência de memória vazia, ou recuperar uma instância que não existe, dentro outros motivos
 
try {
	CarroVo carro = new CarroVo();
	carro.getPlaca();
} catch (IntegrationException e) {
	throw new BusinessException(“Erro na criação do objeto”, e);
}
 
 finally
é um bloco de código que pode ou não ser utilizado junto com o try catch, ele sempre vai ser executado mesmo se ocorrer um erro ou não, ele é usado para liberar recursos ou para dar continuidade em um fluxo que deve ocorrer independente do erro

try { 
  // código que inclui comandos/invocações de métodos 
  // que podem gerar uma situação de exceção. 
} catch (XException ex) { 
  // bloco de tratamento associado à condição de 
  // exceção XException ou a qualquer uma de suas 
  // subclasses, identificada aqui pelo objeto 
  // com referência ex 
} catch (YException ey) { 
  // bloco de tratamento para a situação de exceção 
  // YException ou a qualquer uma de suas subclasses 
} finally { 
  // bloco de código que sempre será executado após 
  // o bloco try, independentemente de sua conclusão 
  // ter ocorrido normalmente ou ter sido interrompida 
} 
 
throw e throws 
throws: é a assinatura do método que será retornado caso ocorra erro para o método que fez a chamada, dentro de um fluxo encadeado
throw: é usado para lançar a exceção desejada, juntamente com a mensagem de erro, para o método que fez a chamada
 
public class Main {
  static void checkAge(int age) throws ArithmeticException {
    if (age < 18) {
      throw new ArithmeticException("Access denied - You must be at least 18 years old.");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }


  public static void main(String[] args) {
    checkAge(15); // Set age to 15 (which is below 18...)
  }
}
 
 
 
 
 
 
 
 
 
 
